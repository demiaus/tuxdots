"
" ~/.vim/vimrc
"

filetype on
filetype plugin on
filetype indent on
syntax on

" PLUGINS {{{///////////////////////////////////////////////////////////////////

" "VIM-PLUG AUTO-INSTALL"

 let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
 if empty(glob(data_dir . '/autoload/plug.vim'))
     silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs 
         \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
     autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
 endif

 call plug#begin()
     Plug 'amadeus/vim-convert-color-to'
     Plug 'cespare/vim-toml', { 'branch': 'main' }
     Plug 'chrisbra/colorizer'
     Plug 'chrisbra/unicode.vim'
     Plug 'christoomey/vim-titlecase'
     Plug 'danilo-augusto/vim-afterglow'
     Plug 'dense-analysis/ale'
     Plug 'dylanaraps/fff.vim'
     Plug 'glts/vim-magnum'
     Plug 'glts/vim-radical'
     Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
     Plug 'jorengarenar/vim-mvvis'
     Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
     Plug 'junegunn/vim-easy-align'
     Plug 'mattn/calendar-vim'
     Plug 'mbbill/undotree'
     Plug 'psliwka/vim-smoothie'
     Plug 'rhysd/rust-doc.vim'
     Plug 'romainl/vim-cool'
     Plug 'rust-lang/rust.vim'
     Plug 'sheerun/vim-polyglot'
     Plug 'skywind3000/asyncrun.vim'
     Plug 'svermeulen/vim-subversive'
     Plug 'svermeulen/vim-yoink'
     Plug 'tommcdo/vim-exchange'
     Plug 'tpope/vim-abolish' " required by VIM-SUBVERSIVE
     Plug 'tpope/vim-characterize'
     Plug 'tpope/vim-commentary'
     Plug 'tpope/vim-repeat'
     Plug 'tpope/vim-surround'
     Plug 'tridactyl/vim-tridactyl'
     Plug 'vimwiki/vimwiki'
 call plug#end()
"
""}}}////////////////////////////////////////////////////////////////////////////
"
" {{{ SETTINGS /////////////////////////////////////////////////////////////////

set nocompatible
set clipboard=unnamedplus
set hidden
set viminfo+=n~/.vim/viminfo
set nostartofline
set undodir=~/.vim/undo
if has("persistent_undo")
   let target_path = expand('~/.vim/undo')
    if !isdirectory(target_path)
        call mkdir(target_path, "p", 0700)
    endif
    let &undodir=target_path
    set undofile
endif

" "VISUAL"
set number
set relativenumber
set cursorline
set cursorcolumn
set colorcolumn=100
set lazyredraw
set listchars=tab:>-,trail:Â·,nbsp:_
set list
set sidescroll=8
set noshowmatch
set nospell
set tws=100x50

" "CMDLINE"
set showcmd
set showmode

" "TABS"
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set smartindent
set shiftround

" "SEARCH"
set incsearch
set hlsearch
set ignorecase
set smartcase
set wildmenu
set wildmenu
set wildmode=list:longest,list:full
" set wildoptions=fuzzy
set shortmess-=S
set autochdir

" "WRAP & FOLD"
set wrap
set foldmethod=marker

" "COMMENTS"
set formatoptions-=c


" }}} //////////////////////////////////////////////////////////////////////////

" COLORS {{{ ///////////////////////////////////////////////////////////////////

set background=dark

if $TERM == 'linux'
    hi ColorColumn  ctermfg=1    ctermbg=0
    hi TabLineFill  ctermfg=0    ctermbg=0
    hi TabLineSel   ctermfg=2    ctermbg=0
    hi StatusLine   ctermfg=0    ctermbg=2
    hi StatusLine   ctermfg=0    ctermbg=2
    hi StatusLineNC ctermfg=0    ctermbg=4
    hi CursorColumn ctermfg=NONE ctermbg=8
    hi CursorLine   ctermfg=NONE ctermbg=8
else
    set termguicolors
    colorscheme rose-pine-dark
    " colorscheme lesser
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" }}} //////////////////////////////////////////////////////////////////////////

" FUNCTIONS {{{/////////////////////////////////////////////////////////////////

" Set C build
function! COptions()
    setlocal commentstring=//\ %s
    if filereadable(expand("./build.sh"))
        setlocal makeprg=./build.sh\ %
    elseif filereadable(expand("~/projects/c/build.sh"))
        setlocal makeprg=~/projects/c/build.sh\ %
    endif
endfunction

" Replace colorname under cursor with value from .Xresources
function! GetXresColor()
    let l:hex = substitute(system('xrdb -query | grep ' . expand("<cword>") . ' | cut -f 2'), '\n\+$', '', '')
    execute "normal! ciw" . l:hex
endfunction

function! ReplaceColors()
	:%s/#C6ECFF/#1f1d2e/ig
	:%s/#B2DDF2/#1f1d2e/ig
	:%s/#B0DBF1/#1f1d2e/ig
	:%s/#A9D6EB/#1f1d2e/ig
	:%s/#9ECCE3/#1f1d2e/ig
	:%s/#8DBFD6/#1f1d2e/ig
	:%s/#77ADC5/#1f1d2e/ig
	:%s/#5B97B1/#1f1d2e/ig
	:%s/#3B7D98/#1f1d2e/ig
	:%s/#17607D/#1f1d2e/ig
	:%s/#024F6D/#1f1d2e/ig
	:%s/#FDFBE5/#26233a/ig " land
	:%s/#646464/#ebbcba/ig " borders
	:%s/#0978AB/#ebbcba/ig " coast
	:%s/#C12838/#9ccfd8/ig " focus
	:%s/#FFFFFF/#ebbcba/ig " horizon
	:%s/#F9FAE6/#1f1d2e/ig
	:%s/#F7F8E4/#1f1d2e/ig
	:%s/#F0F1DF/#1f1d2e/ig
	:%s/#E5E6D4/#1f1d2e/ig
	:%s/#D4D5C6/#1f1d2e/ig
	:%s/#BEBFB3/#1f1d2e/ig
	:%s/#A2A39B/#1f1d2e/ig
	:%s/#838480/#1f1d2e/ig
	:%s/#656666/#1f1d2e/ig

endfunction

" }}}///////////////////////////////////////////////////////////////////////////

" MAPPINGS {{{///////////////////////////////////////////////////////////

let mapleader = " "

" Y you have to be such a snowflake
nnoremap Y y$

" run q macro
nnoremap Q @q

" Move per visual line
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Move per real line
nnoremap gj j
nnoremap gk k
vnoremap gj j
vnoremap gk k

" Keep visual selection
xnoremap > >gv
xnoremap < <gv
xnoremap <C-a> <C-a>gv
xnoremap <C-x> <C-x>gv

" For Finnish keyboards
noremap , ;
noremap ; ,

" Toggle show whitespace
nnoremap <F3> :set list!<CR>
"Remove all trailing whitespace
nnoremap <F4> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>

" Disable/enable automatic comments
nnoremap <Leader>com :set formatoptions-=cro<CR>
nnoremap <Leader>C :set formatoptions+=cro<CR>
inoremap <C-c> <Esc>:set formatoptions-=cro<CR>a<Space>

" Hide search highlights
nnoremap <Leader><Leader> :nohls<CR>

" Open / reload (source) vimrc
nnoremap <Leader>vi :e $MYVIMRC<CR>
nnoremap <Leader>re :source $MYVIMRC<CR>

" Fix spelling
inoremap <C-s> <Esc>:set spell<CR>a<C-x><C-s>
" Autocomplete line
inoremap <C-l> <C-x><C-l>

" Keep search matches in the middle of the window
nnoremap n nzz
nnoremap N Nzz

" Open non-existing file
noremap gf :e <cfile><CR>

" Open vim rose-pine-dark
nnoremap <Leader>ro :e ~/.vim/colors/rose-pine-dark.vim<CR>
" Check highlighting
nnoremap <Leader>hi :so $VIMRUNTIME/syntax/hitest.vim<CR>

" Insert path
nnoremap <Leader>p :put=expand('%:p:~')<CR>
nnoremap <Leader>P :put=expand('%:p')<CR>

" Hic sunt dracones
cmap Q<CR> q<CR>
nnoremap Q <NOP>

" Buffer navigation
nnoremap <Leader>j :bn<CR>
nnoremap <Leader>k :bp<CR>
nnoremap <Leader>d :bd<CR>

" Get color values from .Xresources for color word under cursor
nnoremap <Leader>x :call GetXresColor()<CR>
xnoremap <Leader>x :call GetXresColor()<CR>

" Readline mappings
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-b> <Left>
cnoremap <C-d> <Delete>

" Insert newline
nnoremap <CR> mzo<Esc>g`z<Down>
nnoremap <Leader><CR> mzO<Esc>g`z

" Upper-/lowercase word
nnoremap <Leader>u guiw
nnoremap <Leader>U gUiw

" Insert datetime
nnoremap <Leader>D :put =strftime('%d.%m.%Y %H:%M')<CR>

" Go to test file
nnoremap <Leader>T :e ~/testing/test.txt<CR>

" Open terminal
nnoremap <Leader>t :vertical terminal<CR>

" Inc-/decrement hex or alpha characters
nnoremap <Leader>ia :set nrformats+=alpha<CR>
nnoremap <Leader>iA :set nrformats-=alpha<CR>
nnoremap <Leader>ih :set nrformats+=hex<CR>
nnoremap <Leader>iH :set nrformats-=hex<CR>

" Don't close accidentally
nnoremap ZZ :q

" Erase redundant spaces"
xnoremap <Leader>_ :s/ \+/ /g<CR>gv:s/ $//g<CR>

" "VIM-SURROUND"
nnoremap <Leader>' :execute "normal \<Plug>YsurroundiW'"<CR>
nnoremap <Leader>" :execute "normal \<Plug>YsurroundiW\""<CR>
nnoremap <Leader>) :execute "normal \<Plug>YsurroundiW)"<CR>
nnoremap <Leader>( :execute "normal \<Plug>YsurroundiW("<CR>
nnoremap <Leader>] :execute "normal \<Plug>YsurroundiW]"<CR>
nnoremap <Leader>[ :execute "normal \<Plug>YsurroundiW["<CR>
nnoremap <Leader>} :execute "normal \<Plug>YsurroundiW}"<CR>
nnoremap <Leader>{ :execute "normal \<Plug>YsurroundiW{"<CR>

" "EASY-ALIGN"
nmap <Leader>a <Plug>(EasyAlign)
xmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a:k mzvi}:EasyAlign : { 'stick_to_left': 0, 'left_margin': 1 }<CR>`z
nmap <Leader>a:h mzvi}:EasyAlign : { 'stick_to_left': 1, 'left_margin': 0 }<CR>`z
nmap <Leader>a=k mzvi}:EasyAlign = { 'stick_to_left': 0, 'left_margin': 1 }<CR>`z
nmap <Leader>a=h mzvi}:EasyAlign = { 'stick_to_left': 1, 'left_margin': 0 }<CR>`z

" "SUBVERSIVE"
nmap s           <Plug>(SubversiveSubstitute)
nmap S           <Plug>(SubversiveSubstituteToEndOfLine)
nmap ss          <Plug>(SubversiveSubstituteLine)
nmap <Leader>s   <Plug>(SubversiveSubvertRange)
nmap <Leader>ss  <Plug>(SubversiveSubvertWordRange)
nmap <Leader>cs  <Plug>(SubversiveSubstituteRangeConfirm)
nmap <Leader>css <Plug>(SubversiveSubstituteWordRangeConfirm)
xmap <Leader>s   <Plug>(SubversiveSubvertRange)
xmap s           <Plug>(SubversiveSubstitute)
xmap p           <Plug>(SubversiveSubstitute)
xmap P           <Plug>(SubversiveSubstitute)
xmap <Leader>cs  <Plug>(SubversiveSubstituteRangeConfirm)

" "YOINK"
nmap <C-n>  <Plug>(YoinkPostPasteSwapBack)
nmap <C-p>  <Plug>(YoinkPostPasteSwapForward)
nmap p      <Plug>(YoinkPaste_p)
nmap P      <Plug>(YoinkPaste_P)
nmap gp     <Plug>(YoinkPaste_gp)
nmap gP     <Plug>(YoinkPaste_gP)

" "VISUAL-SPLIT"
xmap <C-W>gr    <Plug>(Visual-Split-VSResize)
xmap <C-W>gss   <Plug>(Visual-Split-VSSplit)
xmap <C-W>gsa   <Plug>(Visual-Split-VSSplitAbove)
xmap <C-W>gsb   <Plug>(Visual-Split-VSSplitBelow)

" "COLORIZER"
nnoremap <Leader>col :ColorToggle<CR>

" "MVVIS"
vmap <C-h> <Plug>(MvVisLeft)
vmap <C-j> <Plug>(MvVisDown)
vmap <C-k> <Plug>(MvVisUp)
vmap <C-l> <Plug>(MvVisRight)

" "FZF"
nnoremap <Leader>f :call fzf#run({'sink': 'e'})<CR>
nnoremap <Leader>F :FZF ~<CR>

" "ALE"
nnoremap <Leader>A :ALEToggle<CR>
nnoremap <Leader>D :ALEDetail<CR>
nnoremap <Leader>n :ALENext<CR>
nnoremap <Leader>N :ALEPrevious<CR>


" "MAGNUM defaults"
" gA  Shows the four representations of the number under the cursor (or selected in Visual mode).
" crd Convert to decimal
" crx Convert to hex
" cro Convert to octal
" crb Convert to binary

" "EXCHANGE defaults"
" nremap cx  <Plug>Exchange
" nremap cxx <Plug>Exchange_line
" xremap X   <Plug>Exchange_selection

" "VIM-COMMENTARY defaults"
" gcc Comment out a line
" gc  Comment out a selection

" "VIM-TITLECASE defaults"
" nmap <Leader>gz  <Plug>Titlecase
" nmap <Leader>gzz <Plug>TitlecaseLine
" vmap <Leader>gz  <Plug>Titlecase

" }}}///////////////////////////////////////////////////////////////////////////

" OPTIONS {{{///////////////////////////////////////////////////////////////////

" Disable parenhesis highlighting
" let g:loaded_matchparen=1

" "VIMWIKI"
" Use .md files for vimwiki
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
" Make vimwiki markdown links have extension .md for native vim navigation
let g:vimwiki_markdown_link_ext = 1

" "EASY-ALIGN"
" Also align comments
let g:easy_align_ignore_unmatched=0

" "VIM MARKDOWN PREVIEW"
let g:mkdp_echo_preview_url = 1
let vim_markdown_preview_toggle=2
let vim_markdown_preview_hotkey='<A-m>'
let vim_markdown_preview_browser='.local/bin/browser'

" "VIM-TITLECASE"
let g:titlecase_excluded_words = ["and", "as", "as if", "as long as", "at", "but", "by", "even if", "for", "from", "if", "if only", "in", "into", "like", "near", "now that", "nor", "of", "off", "on", "on top of", "once", "onto", "or", "out of", "over", "past", "so", "so that", "than", "that", "till", "to", "up", "upon", "with", "when", "yet"] 

" "COLORIZER"
" Don't colorize colornames
let g:colorizer_colornames=0

" "YOINK"
let  g:yoinkIncludeDeleteOperations=1

" "RUSTFMT"
let g:rustfmt_autosave = 0

" "MVVIS - move selection"
let g:MvVis_mappings = 0

" "FZF"
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" FLOATING WINDOW
" Required:
" - width [float range [0 ~ 1]] or [integer range [8 ~ ]]
" - height [float range [0 ~ 1]] or [integer range [4 ~ ]]
"
" Optional:
" - xoffset [float default 0.5 range [0 ~ 1]]
" - yoffset [float default 0.5 range [0 ~ 1]]
" - relative [boolean default v:false]
" - border [string default 'rounded']: Border style
"   - 'rounded' / 'sharp' / 'horizontal' / 'vertical' / 'top' / 'bottom' / 'left' / 'right'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

" "AsyncRun"
" open quickfix window automatically when AsyncRun is executed
" set the quickfix window 6 lines height.
let g:asyncrun_open = 6
" ring the bell to notify you job finished
let g:asyncrun_bell = 1
" Try to recognize root folder
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '_darcs'] 

" }}}///////////////////////////////////////////////////////////////////////////

" AUTOCMDS {{{//////////////////////////////////////////////////////////////////

command! Diary VimwikiDiaryIndex
augroup vimwikigroup
    autocmd!
    " Automatically update links on read diary
    autocmd BufRead,BufNewFile diary.wiki VimwikiDiaryGenerateLinks
augroup end

" PHP File Types (WordPress, use tabs)
autocmd FileType php set noexpandtab

" Set up C build
augroup Filetype c
    call COptions()
    " F10 to toggle quickfix window
    nnoremap <F10> :call asyncrun#quickfix_toggle(6)<CR>
    " Run single file
    noremap <silent> <F5> :AsyncRun -raw -cwd=$(VIM_FILEDIR) "$(VIM_FILEDIR)/BUILD/$(VIM_FILENOEXT)" <CR>
    " Build current project
    noremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>
    " Run current project
    noremap <silent> <F8> :AsyncRun -cwd=<root> -raw make run <cr>
augroup END

" JS
augroup Filetype js
    set noexpandtab
    set wrap
augroup END

" Remember position of last edit and return on reopen
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Disable CursorLine/-Column in inactive windows
augroup CursorLine
    au!
    au VimEnter    * setlocal cursorline
    au VimEnter    * setlocal cursorcolumn
    au WinEnter    * setlocal cursorline
    au WinEnter    * setlocal cursorcolumn
    au BufWinEnter * setlocal cursorline
    au BufWinEnter * setlocal cursorcolumn
    au WinLeave    * setlocal nocursorline
    au WinLeave    * setlocal nocursorcolumn
augroup END

" Generic stuff at BufEnter
au BufEnter * setlocal formatoptions-=cro

" }}}///////////////////////////////////////////////////////////////////////////

" ABBREVIATIONS {{{/////////////////////////////////////////////////////////////

ab teh the
ab clera clear

" }}}///////////////////////////////////////////////////////////////////////////


" vim: set filetype=vim
